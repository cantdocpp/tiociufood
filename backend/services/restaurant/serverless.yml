service: restaurant

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  timeout: 10
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
        - Effect: "Allow"
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
          Resource: "arn:aws:s3:::tiociufood/*"

functions:
  addRestaurant:
    handler: src/addRestaurant.handler
    memorySize: 512
    events:
      - http:
          path: /api/v1/restaurant/add
          method: post
          cors: true
  getRestaurant:
    handler: src/getRestaurant.handler
    events:
      - http:
          path: /api/v1/restaurant
          method: get
          cors: true
  getRestaurantDetail:
    handler: src/getRestaurantDetail.handler
    events:
      - http:
          path: /api/v1/restaurant/{name}
          method: get
          request:
            parameters:
              paths:
                name: true
          cors: true
  testUploadImage:
    handler: src/testupload.handler
    memorySize: 512
    events:
      - http:
          path: /api/v1/testupload
          method: post
          cors: true
  updateRestaurantHalalStatus:
    handler: src/updateRestaurantHalalStatus.handler
    memorySize: 512
    events:
      - http:
          path: /api/v1/restaurant/halal/update
          method: post
          cors: true
  updateRestaurantData:
    handler: src/updateRestaurantData.handler
    memorySize: 512
    events:
      - http:
          path: /api/v1/restaurant/edit
          method: post
          cors: true

plugins:
  - serverless-offline
